[tool:pytest]
minversion = 3.0
testpaths = tests
norecursedirs = tests/data/* tests/integration/* tests/plugins/data/*
addopts =
    --tb native
    --strict-markers
    --durations 16
    --xdoctest-modules
    --xdoctest-style=google
    --cov-report xml
    --cov-append
    --junitxml=test-report.xml
    # --cov conda   # passed in test runner scripts instead (avoid debugger)
doctest_optionflags =
    NORMALIZE_WHITESPACE
    IGNORE_EXCEPTION_DETAIL
    ALLOW_UNICODE
    ELLIPSIS
markers =
    integration: integration tests that usually require an internet connect
    slow: slow running tests
pythonpath =
    # faking a test-plugin to test ImportError handling
    tests/plugins/data/test-plugin


[flake8]
# see black+flake8 config
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8
max-line-length = 99
# E203 whitespace before ':'
# E402 module level import not at top of file
# E722 do not use bare 'except'
# E731 do not assign a lambda expression, use a def
# W503 line break before binary operator
# D1** Missing docstring
# D205 1 blank line required between summary line and description
# D400 First line should end with a period
# D401 First line should be in imperative mood
extend-ignore = E203,E402,E722,E731,W503,D1,D200,D205,D400,D401
extend-select = D100
exclude = .asv*,build/*,.tox/*,dev*/*,env/*,test_data/*,tests/*,ve/*,utils/*,docs/*,*/_vendor/*,conda/compat.py,conda/common/compat.py,conda_env/compat.py


[coverage:run]
# store relative paths in coverage information
relative_files = True


[coverage:report]
show_missing = True
sort = Miss
skip_covered = True
omit =
    */site-packages/*
    *\site-packages\*
    conda/_vendor/*
    conda/console.py
    conda/cli/activate.py
    conda/cli/main_package.py
    conda/exports.py
    conda/gateways/connection/adapters/ftp.py
    conda/gateways/connection/adapters/s3.py
    conda_env/*
    tests/*
    utils/*
exclude_lines =
    pragma: no cover
    pragma: py$PYTHON_MAJOR_VERSION no cover
    pragma: $TEST_PLATFORM no cover
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    def __repr__
    \s*\.\.\.$
